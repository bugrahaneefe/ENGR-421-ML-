"import numpy as np\nimport matplotlib.pyplot as plt\nimport math\nimport scipy.linalg as linalg\na = np.random.multivariate_normal(np.array([0.0,4.5]),np.array([[3.2,0.0],[0.0,1.2]]),105)\n\nb = np.random.multivariate_normal(np.array([-4.5,-1.0]),np.array([[1.2,0.8],[0.8,1.2]]), 145)\n\nc = np.random.multivariate_normal(np.array([4.5,-1.0]),np.array([[1.2,-0.8],[-0.8,1.2]]), 135)\n\nd = np.random.multivariate_normal(np.array([0.0,-4.0]),np.array([[1.2,0.0],[0.0,3.2]]), 115)\n\n#print(a)\n#print(b[:5,:])\nmean_1= np.mean(a,axis=0)\nmean_2= np.mean(b,axis=0)\nmean_3= np.mean(c,axis=0)\nmean_4= np.mean(d,axis=0)\n\ncovarience_1 = np.cov(np.stack(((a[i]) for i in range(a.shape[0])),axis=1))\ncovarience_2 = np.cov(np.stack(((b[i]) for i in range(b.shape[0])),axis=1))\ncovarience_3 = np.cov(np.stack(((c[i]) for i in range(c.shape[0])),axis=1))\ncovarience_4 = np.cov(np.stack(((d[i]) for i in range(d.shape[0])),axis=1))\n\n\nsample_means = np.stack((mean_1,mean_2,mean_3,mean_4,))\nsample_covariences = np.stack((covarience_1,covarience_2,covarience_3,covarience_4))\nclass_priors = np.stack([i.shape[0] for i in [a,b,c,d]]) / np.sum([a.shape[0],b.shape[0],c.shape[0],d.shape[0]])\n#print(sample_means)\n#print(sample_covariences)\n#print(class_priors)\n\nconfusion =np.zeros((4,4), dtype=int)\nyanlis = np.empty((0,2), float)\nfor data in a:\n    values = np.argmax(np.stack([-np.log(2*math.pi) - 0.5*np.log(np.linalg.det(sample_covariences[c]))-0.5*np.matmul((data-sample_means[c]), np.matmul(linalg.cho_solve(linalg.cho_factor(sample_covariences[c]), np.eye(2)), np.transpose((data - sample_means[c])))) +np.log(class_priors[c]) for c in range(4)]), axis=0)\n    #print(np.stack([data]))\n    #print(data)\n    if (values == 0):\n        confusion[0,0] +=1\n    elif (values !=0):\n        confusion[values,0] = confusion[values,0]+1\n        yanlis = np.append(yanlis,np.stack([data]),axis=0)\n    \nfor data in b:\n    values = np.argmax(np.stack([-np.log(2*math.pi) - 0.5*np.log(np.linalg.det(sample_covariences[c]))-0.5*np.matmul((data-sample_means[c]), np.matmul(linalg.cho_solve(linalg.cho_factor(sample_covariences[c]), np.eye(2)), np.transpose((data - sample_means[c])))) +np.log(class_priors[c]) for c in range(4)]), axis=0)\n    if (values == 1):\n        confusion[1,1] +=1\n    elif (values !=1):\n        confusion[values,1] = confusion[values,1]+1\n        yanlis = np.append(yanlis,np.stack([data]),axis=0)\nfor data in c:\n    values = np.argmax(np.stack([-np.log(2*math.pi) - 0.5*np.log(np.linalg.det(sample_covariences[c]))-0.5*np.matmul((data-sample_means[c]), np.matmul(linalg.cho_solve(linalg.cho_factor(sample_covariences[c]), np.eye(2)), np.transpose((data - sample_means[c])))) +np.log(class_priors[c]) for c in range(4)]), axis=0)\n    if (values == 2):\n        confusion[2,2] +=1\n    elif (values !=2):\n        confusion[values,2] = confusion[values,2]+1\n        yanlis = np.append(yanlis,np.stack([data]),axis=0)\nfor data in d:\n    values = np.argmax(np.stack([-np.log(2*math.pi) - 0.5*np.log(np.linalg.det(sample_covariences[c]))-0.5*np.matmul((data-sample_means[c]), np.matmul(linalg.cho_solve(linalg.cho_factor(sample_covariences[c]), np.eye(2)), np.transpose((data - sample_means[c])))) +np.log(class_priors[c]) for c in range(4)]), axis=0)\n    if (values == 3):\n        confusion[3,3] +=1\n    elif (values !=3):\n        confusion[values,3] = confusion[values,3]+1\n        yanlis = np.append(yanlis,np.stack([data]),axis=0)\n\nprint(\"| y_truth\",\"|\",\"1\",\"|\",\"2\",\"|\",\"3\",\"|\",\"4\")\nprint(\"| y_pred\")\nfor m in range(len(confusion)):\n    print(\"|\",m+1,end=\"\\t\")\n    for j in range(len(confusion)):\n        print(\"|\",confusion[m][j], end=\"\\t\")\n    print(\"\\n\")\n    \nplt.figure(figsize = (5, 5))\n\nplt.plot(a[:,0], a[:,1], \"r.\", markersize = 3)\nplt.plot(b[:,0], b[:,1], \"g.\", markersize = 3)\nplt.plot(c[:,0], c[:,1], \"b.\", markersize = 3)\nplt.plot(d[:,0], d[:,1], \"m.\", markersize = 3)\nplt.plot(yanlis[:,0], yanlis[:,1], \"ok\", markersize = 5,markerfacecolor='none')\n\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$y$\")\nplt.show()"